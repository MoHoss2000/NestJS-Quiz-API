// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName      String?
  lastName       String?
  createdQuizzes Quiz[]
  solvedQuizzes  QuizSolution[]

  @@map("users")
}

// model AnswerOption {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   answerText String
//   isCorrect  Boolean @default(false)

//   questionId String
//   question   Question @relation(fields: [questionId], references: [id])

//   // questionSolutionsIds String[]           @db.ObjectId
//   // questionSolution     QuestionSolution[] @relation(fields: [questionSolutionsIds], references: [id])

//   @@map("answer_options")
// }

type AnswerOption {
  // id         String  @default(uuid())
  answerText String
  isCorrect  Boolean @default(false)
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionText    String
  multipleAnswers Boolean        @default(false)
  options         AnswerOption[]

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // @@unique([id,])
  @@map("questions")
}

model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  published Boolean    @default(false)
  questions Question[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  solutions QuizSolution[]

  @@map("quizzes")
}

// model QuestionSolution {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   questionScore Float    @default(0)

//   answersIds String[]       @db.ObjectId
//   answers    AnswerOption[] @relation(fields: [answersIds], references: [id])

//   quizSolutionId String       @db.ObjectId
//   quizSolution   QuizSolution @relation(fields: [quizSolutionId], references: [id])

//   @@map("answer_solutions")
// }

model QuizSolution {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizScore Float    @default(0)

  quizId           String
  quiz             Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionsAnswers QuestionSolution[]

  @@map("quiz_solutions")
}

type QuestionSolution {
  questionId    String
  chosenAnswers String[]
  questionScore Float    @default(0)
}
